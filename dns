#!/bin/bash

# ==============================================================================
# Author: Yuipedia
# Github Repo : https://github.com/xenvoid404/manage-dns-cloudflare-cli
# ==============================================================================

# Konfigurasi Awal (WAJIB DIISI)
CF_EMAIL="example@gmail.com" # Ganti dengan email yang terhubung dengan akun Cloudflare Anda
CF_API_KEY="YOUR_CLOUDFLARE_API_KEY" # Ganti dengan Global API Key Cloudflare Anda.
ZONE_ID="YOUR_ZONE_ID" # Ganti dengan Zone ID domain yang ingin Anda kelola

# Variabel Global & Inisialisasi
API_URL="https://api.cloudflare.com/client/v4"
ACCOUNT_ID="" # Biarkan kosong, Ini akan diisi otomatis.
ZONE_NAME="" # Biarkan kosong, Ini akan diisi otomatis.
WORKER_NAME="temp-ssl-provisioner-$(date +%s)" # Nama worker unik untuk sesi ini
WORKER_SCRIPT_EXISTS=false

# Warna untuk output log
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fungsi untuk menampilkan pesan cara penggunaan script
usage() {
    echo "Usage: $0 {get|create|update|delete} [file.json]"
    echo ""
    echo "Commands:"
    echo "  get                      Fetch all DNS records and save to records.json"
    echo "  create [file.json]       Create/Add DNS records from a specified JSON file"
    echo "  update [file.json]       Update/Edit DNS records from a specified JSON file"
    echo "  delete [file.json]       Delete DNS records from a specified JSON file"
    echo ""
    echo "Examples:"
    echo "  ./$0 get"
    echo "  ./$0 create records.json"
    exit 1
}

# Install dependensi (curl dan jq)
install_deps() {
    local deps=("curl" "jq")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo -e "${YELLOW}Installing $dep...${NC}"
            apt install -y "$dep"
        fi
    done
}

# Ambil detail domain (Account ID dan Nama Domain)
get_zone_details() {
    if [ -n "$ACCOUNT_ID" ] && [ -n "$ZONE_NAME" ]; then
        return 0
    fi

    echo -e "${YELLOW}Fetching zone details...${NC}"
    local response
    response=$(curl -s -X GET "${API_URL}/zones/${ZONE_ID}" \
        -H "X-Auth-Email: ${CF_EMAIL}" \
        -H "X-Auth-Key: ${CF_API_KEY}" \
        -H "Content-Type: application/json")

    if [ "$(echo "$response" | jq -r .success)" != "true" ]; then
        echo -e "${RED}Error fetching zone details:${NC}"
        echo "$response" | jq .
        return 1
    else
        ACCOUNT_ID=$(echo "$response" | jq -r .result.account.id)
        ZONE_NAME=$(echo "$response" | jq -r .result.name)
        echo -e "${GREEN}Successfully fetched Account ID and Zone Name.${NC}"
        return 0
    fi
}

# Buat script worker sementara
setup_worker_script() {
    if [ "$WORKER_SCRIPT_EXISTS" = true ]; then
        return 0
    fi

    if ! get_zone_details; then
        echo -e "${RED}Cannot proceed without Account ID.${NC}"
        return 1
    fi

    echo "Ensuring temporary worker script '${WORKER_NAME}' exists..."
    local worker_script='addEventListener("fetch", event => { event.respondWith(new Response("OK", { status: 200 })) });'
    local response_worker
    response_worker=$(curl -s -X PUT "${API_URL}/accounts/${ACCOUNT_ID}/workers/scripts/${WORKER_NAME}" \
        -H "X-Auth-Email: ${CF_EMAIL}" \
        -H "X-Auth-Key: ${CF_API_KEY}" \
        -H 'Content-Type: application/javascript' \
        --data "${worker_script}")

    if [ "$(echo "$response_worker" | jq -r .success)" != "true" ]; then
        echo -e "${RED}  Failed to upload worker script.${NC}"
        echo "$response_worker" | jq .
        return 1
    else
        WORKER_SCRIPT_EXISTS=true
        echo -e "  ${GREEN}Worker script is ready.${NC}"
        return 0
    fi
}

# Hapus script worker di akhir proses
cleanup() {
    if [ "$WORKER_SCRIPT_EXISTS" = true ]; then
        echo -e "${YELLOW}Cleaning up temporary worker script '${WORKER_NAME}'...${NC}"
        curl -s -X DELETE "${API_URL}/accounts/${ACCOUNT_ID}/workers/scripts/${WORKER_NAME}" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" > /dev/null
        echo -e "${GREEN}Cleanup complete.${NC}"
    fi
}

# Atur fungsi cleanup dijalankan saat script selesai atau diinterupsi
trap cleanup EXIT

# Fungsi untuk mengambil semua record DNS
get_records() {
    echo -e "${YELLOW}Fetching DNS records for Zone ID: ${ZONE_ID}...${NC}"
    local response
    response=$(curl -s -X GET "${API_URL}/zones/${ZONE_ID}/dns_records" \
        -H "X-Auth-Email: ${CF_EMAIL}" \
        -H "X-Auth-Key: ${CF_API_KEY}" \
        -H "Content-Type: application/json")
        
    if [ "$(echo "$response" | jq -r .success)" == "true" ]; then
        echo "$response" | jq '.result' > records.json
        echo -e "${GREEN}Successfully fetched records. Output saved to records.json${NC}"
    else
        echo -e "${RED}Error fetching records:${NC}"
        echo "$response" | jq .
    fi
}

# Fungsi untuk menambah record DNS dari file dengan worker
create_records() {
    local file=$1
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File '${file}' not found.${NC}"
        exit 1
    fi
    
    if ! setup_worker_script; then
        echo -e "${RED}Aborting process due to worker setup failure.${NC}"
        exit 1
    fi
    
    echo -e "\n${CYAN}--- STAGE 1: ATTACHING WORKERS ---${NC}"
    declare -A worker_domain_ids
    
    # Loop 1: Pasang semua worker
    local all_records
    all_records=$(jq -c '.[]' "$file")
    
    while IFS= read -r record; do
        local sub_name=$(echo "$record" | jq -r .name)
        local name="${sub_name}.${ZONE_NAME}"
        echo "  Attaching worker to '${name}'..."

        local payload
        payload=$(jq -n \
            --arg hostname "$name" \
            --arg service "$WORKER_NAME" \
            --arg zone_id "$ZONE_ID" \
            '{hostname: $hostname, service: $service, zone_id: $zone_id, environment: "production"}')
            
        local response_attach
        response_attach=$(curl -s -X PUT "${API_URL}/accounts/${ACCOUNT_ID}/workers/domains" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" \
            -H "Content-Type: application/json" \
            --data "$payload")
            
        if [ "$(echo "$response_attach" | jq -r .success)" == "true" ]; then
            local worker_id=$(echo "$response_attach" | jq -r .result.id)
            worker_domain_ids["$name"]=$worker_id
            echo -e "  ${GREEN}SUCCESS${NC} (Worker Domain ID: $worker_id)"
        else
            echo -e "  ${RED}FAILED${NC}. This hostname will be skipped."
            echo "$response_attach" | jq .errors
        fi
    done <<< "$all_records"
    
    if [ ${#worker_domain_ids[@]} -eq 0 ]; then
        echo -e "${RED}No workers were attached successfully. Aborting.${NC}"
        exit 1
    fi
    
    echo -e "\n${CYAN}--- STAGE 2: WAITING FOR SSL CERTIFICATES ---${NC}"
    echo -e "${YELLOW}Waiting for 30 seconds...${NC}"
    sleep 30

    echo -e "\n${CYAN}--- STAGE 3: PROCESSING DNS RECORDS & DETACHING WORKERS ---${NC}"
    
    # Loop 2: Proses DNS dan lepas worker
    while IFS= read -r record; do
        local sub_name=$(echo "$record" | jq -r .name)
        local name="${sub_name}.${ZONE_NAME}"

        # Hanya proses record yang workernya berhasil dipasang
        if [[ -z "${worker_domain_ids[$name]}" ]]; then
            echo "Skipping DNS action for '${name}' as worker attachment failed."
            continue
        fi
        
        # Lepas Worker
        local worker_id_to_detach=${worker_domain_ids[$name]}
        echo "  Detaching worker from '${name}' (Worker Domain ID: $worker_id_to_detach)..."
        curl -s -X DELETE "${API_URL}/accounts/${ACCOUNT_ID}/workers/domains/${worker_id_to_detach}" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" > /dev/null
        
        # Aksi DNS
        echo "  Creating record for '${name}'..."
        local payload=$(echo "$record" | jq '.')
        local response_dns
        response_dns=$(curl -s -X POST "${API_URL}/zones/${ZONE_ID}/dns_records" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" \
            -H "Content-Type: application/json" --data "$payload")
        
        if [ "$(echo "$response_dns" | jq -r .success)" == "true" ]; then
            echo -e "  ${GREEN}DNS action SUCCESS${NC}"
        else
            echo -e "  ${RED}DNS action FAILED${NC}"
            echo "$response_dns" | jq .errors
        fi
        
    done <<< "$all_records"
}

# Fungsi untuk mengupdate record DNS dari file
update_records() {
    local file=$1
    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File '${file}' not found.${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Starting to update DNS records from ${file}...${NC}"
    
    jq -c '.[]' "$file" | while read -r record; do
        local id=$(echo "$record" | jq -r .id)
        local sub_name=$(echo "$record" | jq -r .name)
        local name="${sub_name}.${ZONE_NAME}"
        
        if [ "$id" == "null" ] || [ -z "$id" ]; then
            echo -e "  ${RED}SKIPPING: Record is missing 'id' field.${NC}"
            echo "  Record data: $record"
            continue
        fi

        echo "  Updating record for '${name}' (ID: $id)..."
        local payload=$(echo "$record" | jq 'del(.id)')
        local response
        response=$(curl -s -X PUT "${API_URL}/zones/${ZONE_ID}/dns_records/${id}" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" \
            -H "Content-Type: application/json" --data "$payload")

        if [ "$(echo "$response" | jq -r .success)" == "true" ]; then
            echo -e "  ${GREEN}SUCCESS${NC}"
        else
            echo -e "  ${RED}FAILED${NC}"
            echo "$response" | jq .errors
        fi
    done
}

# Fungsi untuk menghapus record DNS dari file
delete_records() {
    local file=$1
    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File '${file}' not found.${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Starting to delete DNS records from ${file}...${NC}"
    
    jq -c '.[]' "$file" | while read -r record; do
        local id=$(echo "$record" | jq -r .id)
        if [ "$id" == "null" ] || [ -z "$id" ]; then
            echo -e "  ${RED}SKIPPING: Record is missing 'id' field.${NC}"
            echo "  Record data: $record"
            continue
        fi

        echo "  Deleting record ID: ${id}"
        local response
        response=$(curl -s -X DELETE "${API_URL}/zones/${ZONE_ID}/dns_records/${id}" \
            -H "X-Auth-Email: ${CF_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" \
            -H "Content-Type: application/json")

        if [ "$(echo "$response" | jq -r .success)" == "true" ]; then
            echo -e "  ${GREEN}SUCCESS${NC}"
        else
            echo -e "  ${RED}FAILED${NC}"
            echo "$response" | jq .errors
        fi
    done
}


# Logika Utama
install_deps # Install dependensi

# Cek argumen yang diberikan
if [ $# -eq 0 ]; then
    usage
fi

# Cek kredensial
if [ "$CF_API_KEY" == "YOUR_CLOUDFLARE_API_KEY" ] || [ "$CF_EMAIL" == "example@gmail.com" ] || [ "$ZONE_ID" == "YOUR_ZONE_ID" ]; then
    echo -e "${RED}Error: Please fill in your Cloudflare credentials (CF_API_KEY, CF_EMAIL, ZONE_ID) at the top of the script.${NC}"
    exit 1
fi

ACTION=$1
FILENAME=$2

case $ACTION in
    get)
        get_records
        ;;
    create)
        if [ -z "$FILENAME" ]; then usage; fi
        create_records "$FILENAME" "create"
        ;;
    update)
        if [ -z "$FILENAME" ]; then usage; fi
        update_records "$FILENAME" "update"
        ;;
    delete)
        if [ -z "$FILENAME" ]; then usage; fi
        delete_records "$FILENAME"
        ;;
    *)
        echo -e "${RED}Error: Invalid action '${ACTION}'.${NC}"
        usage
        ;;
esac

exit 0